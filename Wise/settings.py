"""
Django settings for Wise project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
# from decouple import config
import dj_database_url
import os
from django.contrib.messages import constants as messages
import os
import dotenv
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add .env variables
load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-605*=&8xbd106t$fyn0n5-!7&v34!zg9%!1*oj-5m=(2ir^*7('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# BASE_URL = os.environ['BASE_URL']
# BINANCE_API_SECRET = os.environ['BINANCE_API_SECRET']

BASE_URL = ''
BINANCE_API_SECRET = ''

ALLOWED_HOSTS = ['*']

# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'wiseapp.apps.WiseappConfig',
    'django_celery_beat',
    'django_htmx',
    'django_celery_results',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # 'csp.middleware.CSPMiddleware',
    "django_permissions_policy.PermissionsPolicyMiddleware",
]

ROOT_URLCONF = 'Wise.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'wiseapp.context_processors.message_processor'
            ],
        },
    },
]

WSGI_APPLICATION = 'Wise.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        },
    # 'default_': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': os.environ['DB_NAME'],
    #     'USER': os.environ['DB_USER'],
    #     'PASSWORD': os.environ['DB_PASSWORD'],
    #     'HOST': os.environ['DB_HOST'],
    #     'PORT': int(os.environ['DB_PORT']),
    # },
}

# Heroku DB / Railway DB
DATABASE_URL = os.getenv("DATABASE_URL")
db_from_env = dj_database_url.config(default=DATABASE_URL, conn_max_age=600)
DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGOUT_REDIRECT_URL = 'landing'

LOGOUT_URL = 'logout'

LOGIN_URL = 'login'

LOGIN_REDIRECT_URL = 'profile_page'

COINPAYMENTS_ADMIN_ENABLED = True
# COINPAYMENTS_API_KEY = os.environ['COINPAYMENTS_API_KEY']
# COINPAYMENTS_API_SECRET = os.environ['COINPAYMENTS_API_SECRET']
# IPN_URL = os.environ['IPN_URL']
COINPAYMENTS_API_KEY = ''
COINPAYMENTS_API_SECRET = ''
IPN_URL = ''

# gmail settings
# DEFAULT_FROM_EMAIL = os.environ['DEFAULT_FROM_EMAIL']
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = os.environ['EMAIL_HOST']
# EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
# EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
DEFAULT_FROM_EMAIL = ''
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ''
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_PORT = 465
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
SERVER_EMAIL = DEFAULT_FROM_EMAIL


"""CELERY_BEAT_SCHEDULE = {
    'scheduled_task': {
        'task': 'wiseapp.tasks.add',
        'schedule': 5.0,
        'args': (10, 10),
    },
}"""

# colour code for messages
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# CELERY_CACHE_BACKEND = 'default'
#
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
#         'LOCATION': 'cachedb'
#     }
# }

# S3 BUCKETS
AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_KEY_ID = os.environ['AWS_SECRET_KEY_ID']
AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']

# # AWS_S3_FILE_OVERWRITE =
AWS_DEFAULT_ACL = None
DEFAULT_FILE_STORAGE = 'storages.backerands.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'

# CELERY_TASK_REJECT_ON_WORKER_LOST = True
# CELERY_ACKS_LATE = True
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
if os.getcwd() == '/app':
    SESSION_COOKIE_AGE = 24 * 60 * 60
    # SECURITY
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # TODO: set this to 60 seconds first and then to 518400 once you prove the former works
    SECURE_HSTS_SECONDS = 30 * 24 * 60 * 60
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    ADMIN_URL = os.environ['DJANGO_ADMIN_URL']
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"
    CELERY_BROKER_URL = os.environ['REDISCLOUD_URL']
    CELERY_RESULT_BACKEND = CELERY_BROKER_URL
    # CELERY_BROKER_URL = os.environ['rabbitMQ']
    CELERY_SEND_EVENTS = True
    CELERY_TRACK_STARTED = True
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": os.environ['REDISCLOUD_URL'],
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # Mimicing memcache behavior.
                # https://github.com/jazzband/django-redis#memcached-exceptions-behavior
                "IGNORE_EXCEPTIONS": True,
            },
        }
    }
    if USE_TZ:
        CELERY_TIMEZONE = TIME_ZONE
    DEBUG = False
else:
    ADMIN_URL = 'admin/'


# uri to report policy violations
CSP_REPORT_URI = os.environ['CSP_REPORT_URI']
# default source as self
CSP_DEFAULT_SRC = ("'self'", )

# style from our domain and bootstrapcdn
CSP_STYLE_SRC = ("'self'",
                 "stackpath.bootstrapcdn.com",
                 "unpkg.com",
                 "fonts.gstatic.com",
                 'fonts.googleapis.com',
                 "cdnjs.cloudflare.com",
                 'htmx.org')

# scripts from our domain and other domains
CSP_SCRIPT_SRC = ("'self'",
                  "ajax.cloudflare.com",
                  "static.cloudflareinsights.com",
                  "www.google-analytics.com",
                  "ssl.google-analytics.com",
                  "cdn.ampproject.org",
                  "www.googletagservices.com",
                  "pagead2.googlesyndication.com",
                  'unpkg.com')

# images from our domain and other domains
CSP_IMG_SRC = ("'self'",
               "www.google-analytics.com",
               "raw.githubusercontent.com",
               "googleads.g.doubleclick.net",
               'w3.org',
               'data:')

# loading manifest, workers, frames, etc
CSP_FONT_SRC = ("'self'",
                "fonts.gstatic.com",
                'fonts.googleapis.com',
                'cdnjs.cloudflare.com')
CSP_CONNECT_SRC = ("'self'",
                   "www.google-analytics.com" )
CSP_OBJECT_SRC = ("'self'", )
CSP_BASE_URI = ("'self'", )
CSP_FRAME_ANCESTORS = ("'self'", )
CSP_FORM_ACTION = ("'self'", )
CSP_INCLUDE_NONCE_IN = ('script-src', )
CSP_MANIFEST_SRC = ("'self'", )
CSP_WORKER_SRC = ("'self'", )
CSP_MEDIA_SRC = ("'self'", )


# PERMISSION POLICY
PERMISSIONS_POLICY = {
    "accelerometer": [],
    "autoplay": [],
    "camera": [],
    "display-capture": [],
    "document-domain": [],
    "encrypted-media": [],
    "fullscreen": [],
    "geolocation": [],
    "gyroscope": [],
    "magnetometer": [],
    "microphone": [],
    "midi": [],
    "payment": [],
    "usb": [],
}